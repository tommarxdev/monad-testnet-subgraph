type AllowedSmartContractUpdated @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  _isAllowedSmartContract: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BaseURISet @entity(immutable: true) {
  id: Bytes!
  baseURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EnforcedOptionSet @entity(immutable: true) {
  id: Bytes!
  _enforcedOptions: [Bytes!]! # tuple[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MsgInspectorSet @entity(immutable: true) {
  id: Bytes!
  inspector: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ONFTReceived @entity(immutable: true) {
  id: Bytes!
  guid: Bytes! # bytes32
  srcEid: BigInt! # uint32
  toAddress: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ONFTSent @entity(immutable: true) {
  id: Bytes!
  guid: Bytes! # bytes32
  dstEid: BigInt! # uint32
  fromAddress: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PeerSet @entity(immutable: true) {
  id: Bytes!
  eid: BigInt! # uint32
  peer: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PreCrimeSet @entity(immutable: true) {
  id: Bytes!
  preCrimeAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicMint @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicPhaseStarted @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenEvolved @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  evolution: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WhitelistMint @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  minter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WhitelistPhaseStarted @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WhitelistUpdated @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  _isWhitelisted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!                # Unique identifier (tokenId)
  tokenId: BigInt!       # Token ID (from Transfer event)
  owner: Bytes!          # Owner's address
  contract: Bytes!       # Contract address of the NFT
  tokenURI: String       # Metadata URI
  blockNumber: BigInt!   # Block number where this token was last updated
  blockTimestamp: BigInt! # Timestamp of the last event
  transactionHash: Bytes! # Transaction hash of the last event
}

type GlobalSettings @entity {
  id: ID!                # Always a single ID, e.g. "global"
  baseURI: String        # The latest base URI
}

